-- Criação do Banco de Dados
CREATE DATABASE GerenciamentoEventos;
USE GerenciamentoEventos;

-- Criação das Tabelas

-- Tabela de Eventos
CREATE TABLE Eventos (
    id_evento INT AUTO_INCREMENT PRIMARY KEY,
    nome_evento VARCHAR(100) NOT NULL,
    data_evento DATE NOT NULL,
    local_evento VARCHAR(255),
    descricao TEXT
);

-- Tabela de Participantes
CREATE TABLE Participantes (
    id_participante INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    telefone VARCHAR(20)
);

-- Tabela de Inscrições
CREATE TABLE Inscricoes (
    id_inscricao INT AUTO_INCREMENT PRIMARY KEY,
    id_evento INT,
    id_participante INT,
    data_inscricao DATE NOT NULL,
    FOREIGN KEY (id_evento) REFERENCES Eventos(id_evento),
    FOREIGN KEY (id_participante) REFERENCES Participantes(id_participante)
);

-- Inserção de Dados

-- Inserir Eventos
INSERT INTO Eventos (nome_evento, data_evento, local_evento, descricao) VALUES 
('Workshop de SQL', '2024-09-10', 'Auditório 1', 'Workshop para aprender SQL.'),
('Conferência de Tecnologia', '2024-10-05', 'Centro de Convenções', 'Conferência sobre novas tecnologias.'),
('Seminário de Marketing', '2024-11-20', 'Sala 3', 'Seminário sobre estratégias de marketing.');

-- Inserir Participantes
INSERT INTO Participantes (nome, email, telefone) VALUES 
('Lucas Almeida', 'lucas.almeida@email.com', '1111-2222'),
('Fernanda Costa', 'fernanda.costa@email.com', '3333-4444'),
('João Pereira', 'joao.pereira@email.com', '5555-6666');

-- Inserir Inscrições
INSERT INTO Inscricoes (id_evento, id_participante, data_inscricao) VALUES 
(1, 1, '2024-08-15'),
(1, 2, '2024-08-20'),
(2, 1, '2024-09-01'),
(3, 3, '2024-10-10'),
(3, 2, '2024-10-12');

-- Consultas e Relatórios

-- 1. Mostrar todos os eventos disponíveis
SELECT * FROM Eventos;

-- 2. Consultar a lista de participantes inscritos em um evento específico (por exemplo, evento com id_evento = 1)
SELECT 
    p.nome AS nome_participante,
    p.email,
    p.telefone
FROM Inscricoes i
JOIN Participantes p ON i.id_participante = p.id_participante
WHERE i.id_evento = 1;

-- 3. Verificar todos os eventos nos quais um determinado participante está inscrito (por exemplo, participante com id_participante = 1)
SELECT 
    e.nome_evento,
    e.data_evento,
    e.local_evento
FROM Inscricoes i
JOIN Eventos e ON i.id_evento = e.id_evento
WHERE i.id_participante = 1;

-- Atualizações de Dados

-- 1. Atualizar informações de um evento (exemplo: alterar data e local do evento com id_evento = 1)
UPDATE Eventos
SET local_evento = 'Auditório 2', data_evento = '2024-09-12'
WHERE id_evento = 1;

-- 2. Modificar informações de contato de um participante (exemplo: atualizar telefone do participante com id_participante = 1)
UPDATE Participantes
SET telefone = '7777-8888'
WHERE id_participante = 1;

-- Deleção de Dados

-- 1. Remover eventos passados do banco de dados (exemplo: remover evento com id_evento = 2)
DELETE FROM Eventos
WHERE id_evento = 2;

-- 2. Cancelar inscrições de participantes para determinados eventos (exemplo: cancelar inscrição com id_inscricao = 1)
DELETE FROM Inscricoes
WHERE id_inscricao = 1;

-- Tarefas Adicionais

-- 1. Listar todos os participantes que se inscreveram em mais de um evento
SELECT 
    p.nome,
    p.email,
    COUNT(i.id_evento) AS total_eventos
FROM Inscricoes i
JOIN Participantes p ON i.id_participante = p.id_participante
GROUP BY p.id_participante
HAVING COUNT(i.id_evento) > 1;

-- 2. Criar uma interface simples para interagir com o sistema (Exemplo: consultas básicas são as interfaces)
-- Interface SQL básica já implementada com consultas e relatórios acima.
